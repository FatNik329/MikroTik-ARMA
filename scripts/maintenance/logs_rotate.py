# –°–∫—Ä–∏–ø—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
import os
import glob
import gzip
import yaml
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_config():
    try:
        with open('configs/config.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        return config.get('logs_rotate', {})
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ configs/config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return {}
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
config = load_config()
MAX_DIR_SIZE_MB = config.get('max_dir_size', 5)
MAX_LOG_VERSIONS = config.get('count_arch_logs', 3)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_DIRS = [      # –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ª–æ–≥–∞–º–∏
    "logs"
]

def get_dir_size(path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)"""
    total = 0
    for entry in os.scandir(path):
        if entry.is_file():
            total += entry.stat().st_size
        elif entry.is_dir():
            total += get_dir_size(entry.path)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
    return total / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ú–ë

def find_all_log_dirs(base_dirs):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ .log —Ñ–∞–π–ª—ã"""
    log_dirs = set()

    for base_dir in base_dirs:
        if not os.path.exists(base_dir):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {base_dir}")
            continue

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å .log —Ñ–∞–π–ª–∞–º–∏
        for root, dirs, files in os.walk(base_dir):
            # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .log —Ñ–∞–π–ª—ã
            log_files = [f for f in files if f.endswith('.log') and not f.endswith('.gz')]
            if log_files:
                log_dirs.add(root)

    return sorted(log_dirs)

def rotate_logs_in_dir(log_dir):
    """–†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {log_dir}")
    current_size = get_dir_size(log_dir)
    print(f"üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {current_size:.2f} MB")

    if current_size < MAX_DIR_SIZE_MB:
        print("‚úÖ –†–∞–∑–º–µ—Ä –≤ –Ω–æ—Ä–º–µ, –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return

    # 1. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏ (–∫—Ä–æ–º–µ .gz)
    archived_count = 0
    current_logs = sorted(
        [f for f in glob.glob(os.path.join(log_dir, "*.log")) if not f.endswith('.gz')],
        key=os.path.getmtime  # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ
    )

    for log_file in current_logs:
        if get_dir_size(log_dir) < MAX_DIR_SIZE_MB * 0.9:
            break

        try:
            # –ò–º—è –∞—Ä—Ö–∏–≤–∞: original.log.20240625_142022.gz
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            archive_name = f"{log_file}.{timestamp}.gz"

            with open(log_file, 'rb') as f_in:
                with gzip.open(archive_name, 'wb') as f_out:
                    f_out.writelines(f_in)

            os.remove(log_file)
            print(f"üì¶ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {os.path.basename(log_file)} -> {os.path.basename(archive_name)}")
            archived_count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {os.path.basename(log_file)} ({str(e)})")

    # 2. –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –∞—Ä—Ö–∏–≤—ã (–ø–∞—Ä–∞–º–µ—Ç—Ä MAX_LOG_VERSIONS)
    deleted_count = 0
    all_archives = sorted(
        glob.glob(os.path.join(log_dir, "*.log.*.gz")),
        key=os.path.getmtime,
        reverse=True
    )

    for old_archive in all_archives[MAX_LOG_VERSIONS:]:
        try:
            os.remove(old_archive)
            print(f"üßπ –£–¥–∞–ª—ë–Ω –∞—Ä—Ö–∏–≤: {os.path.basename(old_archive)}")
            deleted_count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {os.path.basename(old_archive)} ({str(e)})")

    print(f"üîπ –ò—Ç–æ–≥: –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count}, —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∞—Ä—Ö–∏–≤–æ–≤")
    print(f"üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {get_dir_size(log_dir):.2f} MB")

def main():
    print("===== –ó–∞–ø—É—Å–∫ logs_rotate.py - —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ =====")
    print(f"üîÑ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (–º–∞–∫—Å. {MAX_DIR_SIZE_MB} MB –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, {MAX_LOG_VERSIONS} –∞—Ä—Ö–∏–≤–æ–≤)")

    # –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    all_log_dirs = find_all_log_dirs(LOG_DIRS)

    if not all_log_dirs:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å .log —Ñ–∞–π–ª–∞–º–∏")
        return

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ª–æ–≥–∞–º–∏: {len(all_log_dirs)}")

    for log_dir in all_log_dirs:
        rotate_logs_in_dir(log_dir)

    print("\n‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

if __name__ == "__main__":
    main()

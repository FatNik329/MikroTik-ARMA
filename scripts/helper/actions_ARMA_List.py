"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Address Lists –≤ –ø—Ä–æ–µ–∫—Ç–µ ARMA.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
"""

import argparse
import shutil
import sys
from pathlib import Path
from typing import List, Tuple
import json
import json5
import yaml

# –ë–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).parent.parent.parent
CONFIGS_DIR = BASE_DIR / "configs"
RAW_DATA_DIR = BASE_DIR / "raw-data"
OUTPUT_DATA_DIR = BASE_DIR / "output-data"
CACHE_DIR = BASE_DIR / "cache"


def validate_list_name(list_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞"""
    if not list_name.replace("-", "").isalnum():
        print(f"üö´ –û—à–∏–±–∫–∞: '{list_name}' ‚Äî –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
        return False
    return True


def get_list_paths(list_name: str) -> List[Tuple[Path, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É—Ç–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º"""
    return [
        (CONFIGS_DIR / "AddressLists" / list_name, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AddressList"),
        (RAW_DATA_DIR / list_name / "DNS", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö DNS"),
        (RAW_DATA_DIR / list_name / "AS", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö AS"),
        (OUTPUT_DATA_DIR / list_name / "DNS", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö DNS"),
        (OUTPUT_DATA_DIR / list_name / "AS", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö AS"),
        (OUTPUT_DATA_DIR / list_name / "Custom", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"),
    ]


def create_list(list_name: str) -> bool:
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    try:
        if not validate_list_name(list_name):
            return False

        paths = get_list_paths(list_name)
        created_paths = []

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for path, desc in paths:
            if path.suffix: # –§–∞–π–ª
                path.parent.mkdir(parents=True, exist_ok=True)
                path.touch()
            else:  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                path.mkdir(parents=True, exist_ok=True)
            created_paths.append((path, desc))

        # –®–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_dir = CONFIGS_DIR / "AddressLists" / list_name
        dns_config = config_dir / "DNS" / f"{list_name}.yaml"
        as_config = config_dir / "AS" / "as_list.json5"

        dns_config.parent.mkdir(parents=True, exist_ok=True)
        as_config.parent.mkdir(parents=True, exist_ok=True)

        if not dns_config.exists():
            with open(dns_config, "w") as f:
                yaml.dump({"target_domains": ["example.com", "example2.com"]}, f)
            created_paths.append((dns_config, "DNS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"))

        if not as_config.exists():
            as_numbers = ["AS12345", "AS67890"]
            with open(as_config, "w") as f:
                json.dump(as_numbers, f, indent=2)
            created_paths.append((as_config, "AS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ address_lists.yaml
        address_lists_file = CONFIGS_DIR / "address_lists.yaml"
        address_lists_file.touch(exist_ok=True)

        with open(address_lists_file, "r") as f:
            lists_data = yaml.safe_load(f) or {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        if not isinstance(lists_data, dict):
            lists_data = {}
        if "addressList" not in lists_data:
            lists_data["addressList"] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if list_name not in lists_data["addressList"]:
            lists_data["addressList"].append(list_name)
            with open(address_lists_file, "w") as f:
                yaml.dump(lists_data, f, sort_keys=False)
            created_paths.append((address_lists_file, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ address_lists.yaml"))
        else:
            print(f"‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ '{list_name}' —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ address_lists.yaml")

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
        print("\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
        for path, desc in created_paths:
            print(f"  - {desc}: {path.relative_to(BASE_DIR)}")

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
        print("\nüìå –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print(f"1. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) –≤ {dns_config.relative_to(BASE_DIR)}. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è - —É–¥–∞–ª–∏—Ç–µ —à–∞–±–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        print(f"2. –î–æ–±–∞–≤—å—Ç–µ AS –Ω–æ–º–µ—Ä–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) –≤ {as_config.relative_to(BASE_DIR)}. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è - —É–¥–∞–ª–∏—Ç–µ —à–∞–±–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ run.sh –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é, –∑–∞–ø—É—Å—Ç–∏–≤ –∫–∞–∂–¥—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: python scripts/<functional-level>/<name_scripts>.py")

        return True

    except Exception as e:
        print(f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        return False

def remove_list(list_name: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º"""
    try:
        if not validate_list_name(list_name):
            return False

        paths = get_list_paths(list_name)
        removed_paths = []
        errors = []

        def force_remove(path):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
            if not path.exists():
                return False

            try:
                if path.is_file() or path.is_symlink():
                    path.unlink()
                else:
                    shutil.rmtree(path, ignore_errors=False)

                if path.exists():
                    raise RuntimeError(f"–ü—É—Ç—å {path} –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
                return True
            except Exception as e:
                errors.append(f"{path.relative_to(BASE_DIR)}: {str(e)}")
                return False

        # –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
        for path, desc in paths:
            if force_remove(path):
                removed_paths.append((path, desc))
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {path.relative_to(BASE_DIR)}")
            elif path.exists():
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {path.relative_to(BASE_DIR)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç address_lists.yaml
        address_lists_file = CONFIGS_DIR / "address_lists.yaml"
        if address_lists_file.exists():
            try:
                with open(address_lists_file, "r") as f:
                    lists_data = yaml.safe_load(f) or {}

                if "addressList" in lists_data and list_name in lists_data["addressList"]:
                    lists_data["addressList"].remove(list_name)
                    with open(address_lists_file, "w") as f:
                        yaml.dump(lists_data, f, sort_keys=False)
                    removed_paths.append((address_lists_file, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ address_lists.yaml"))
                    print(f"‚úÖ –£–¥–∞–ª—ë–Ω —Å–ø–∏—Å–æ–∫ '{list_name}' –∏–∑ address_lists.yaml")
                else:
                    print(f"‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ '{list_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ address_lists.yaml")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å address_lists.yaml: {e}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ address_lists.yaml: {e}")

        for parent_dir in [
            RAW_DATA_DIR / list_name,
            OUTPUT_DATA_DIR / list_name,
            CONFIGS_DIR / "AddressLists" / list_name
        ]:
            try:
                if parent_dir.exists() and not any(parent_dir.iterdir()):
                    parent_dir.rmdir()
                    print(f"üîπ –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {parent_dir.relative_to(BASE_DIR)}")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {parent_dir}: {e}")

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞
        print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
        if removed_paths:
            print("\n‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:")
            for path, desc in removed_paths:
                print(f"  - {desc}: {path.relative_to(BASE_DIR)}")

        if errors:
            print("\nüö´ –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:")
            for error in errors:
                print(f"  - {error}")

        return len(errors) == 0

    except Exception as e:
        print(f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Address Lists –≤ –ø—Ä–æ–µ–∫—Ç–µ ARMA",
        epilog="–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
               "  python init_newList.py --create-list YouTube\n"
               "  python init_newList.py --remove-list OldList",
        formatter_class=argparse.RawTextHelpFormatter
    )

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--create-list",
        metavar="NAME",
        help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Address List —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"
    )
    group.add_argument(
        "--remove-list",
        metavar="NAME",
        help="–£–¥–∞–ª–∏—Ç—å Address List –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    )

    args = parser.parse_args()

    if args.create_list:
        if not create_list(args.create_list):
            sys.exit(1)
    elif args.remove_list:
        if not remove_list(args.remove_list):
            sys.exit(1)


if __name__ == "__main__":
    main()
